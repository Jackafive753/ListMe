Index: app/src/main/java/com/hkproductions/listme/host/database/HostDatabase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/hkproductions/listme/host/database/HostDatabase.kt	(date 1605178973317)
+++ app/src/main/java/com/hkproductions/listme/host/database/HostDatabase.kt	(date 1605178973317)
@@ -0,0 +1,67 @@
+package com.hkproductions.listme.host.database
+
+import android.content.Context
+import androidx.room.Database
+import androidx.room.Room
+import androidx.room.RoomDatabase
+import com.hkproductions.listme.guest.database.GuestDataDao
+import com.hkproductions.listme.guest.database.GuestDatabase
+
+@Database(entities = [HostData::class], version = 1, exportSchema = false)
+abstract class HostDatabase : RoomDatabase() {
+
+    abstract val guestDataDao: GuestDataDao
+
+    companion object {
+
+        /**
+         * INSTANCE keep a reference to database returned via getInstance.
+         *
+         * Avoid multiple initialized databases
+         *
+         * Volatile means that the variable never be cached,
+         * all changes will be directly done on the main memory.
+         * This is important for consistent data holding
+         */
+        @Volatile
+        private var INSTANCE: GuestDatabase? = null
+
+        /**
+         * Helper function to get the database
+         *
+         * If a database has already been retrieved, the previous databse will be returned.
+         * Else create a new database.
+         *
+         * This function is threadsafe
+         *
+         * @param context The application context, used to get access to the filesystem
+         */
+        fun getInstance(context: Context): GuestDatabase {
+            /*
+            * If multiple threads ask for a database,
+            * ensure that there is only one database initialize
+            */
+            synchronized(this) {
+                // Copy the current value of INSTANCE to a local variable so Kotlin can smart cast.
+                // Smart cast is only available to local variables.
+                var instance = INSTANCE
+
+                //if instance == null create a new database
+                if (instance == null) {
+                    instance = Room.databaseBuilder(
+                        context.applicationContext,
+                        GuestDatabase::class.java,
+                        "guest_data_database"
+                    ).fallbackToDestructiveMigration()
+                        .build()
+
+                    //Assign INSTANCE to the newly created database
+                    INSTANCE = instance
+                }
+
+                return instance
+            }
+        }
+
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/hkproductions/listme/guest/database/GuestDataDao.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/hkproductions/listme/guest/database/GuestDataDao.kt	(date 1605178790723)
+++ app/src/main/java/com/hkproductions/listme/guest/database/GuestDataDao.kt	(date 1605178790723)
@@ -0,0 +1,7 @@
+package com.hkproductions.listme.guest.database
+
+import androidx.room.Dao
+
+@Dao
+interface GuestDataDao {
+}
\ No newline at end of file
Index: app/src/main/java/com/hkproductions/listme/host/database/HostData.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/hkproductions/listme/host/database/HostData.kt	(date 1605178857074)
+++ app/src/main/java/com/hkproductions/listme/host/database/HostData.kt	(date 1605178857074)
@@ -0,0 +1,65 @@
+package com.hkproductions.listme.host.database
+
+import androidx.room.ColumnInfo
+import androidx.room.Entity
+import androidx.room.PrimaryKey
+
+/**
+ * Represents data of a guest stored by the host
+ * * STORED VALUES:
+ * -->ID
+ * -->FirstName
+ * -->LastName
+ * -->Street
+ * -->House Number
+ * -->Postal-Code
+ * -->City
+ * -->Phone Number
+ * -->StartTime
+ * -->End Time
+ * -->Area Name (Placement)
+ */
+@Entity(tableName = "host_data")
+data class HostData(
+    @PrimaryKey(autoGenerate = true)
+    var dataId: Long = 0L,
+
+    @ColumnInfo(name = "first_name")
+    var firstName: String = "",
+
+    @ColumnInfo(name = "last_name")
+    var lastName: String = "",
+
+    @ColumnInfo(name = "street")
+    var street: String = "",
+
+    @ColumnInfo(name = "house_number")
+    var houseNumber: String = "",
+
+    @ColumnInfo(name = "postal_code")
+    var postalCode: Int = 0,
+
+    @ColumnInfo(name = "city")
+    var city: String = "",
+
+    @ColumnInfo(name = "phone_number")
+    var phoneNumber: String = "",
+
+    /**
+     * start_time_milli represents the time of the check-in
+     */
+    @ColumnInfo(name = "start_time_milli")
+    val startTimeMilli: Long = System.currentTimeMillis(),
+
+    /**
+     * end_time_milli represents the time of the check-out
+     */
+    @ColumnInfo(name = "end_time_milli")
+    var endTimeMilli: Long = -1,
+
+    /**
+     * area represents an area in a room, e.g. table
+     */
+    @ColumnInfo(name = "area_name")
+    var areaName: String = ""
+)
Index: app/src/main/java/com/hkproductions/listme/guest/database/GuestData.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/hkproductions/listme/guest/database/GuestData.kt	(date 1605178719613)
+++ app/src/main/java/com/hkproductions/listme/guest/database/GuestData.kt	(date 1605178719613)
@@ -0,0 +1,44 @@
+package com.hkproductions.listme.guest.database
+
+import androidx.room.ColumnInfo
+import androidx.room.Entity
+import androidx.room.PrimaryKey
+
+/**
+ * Represents data from a user in guest-mode or his household_members
+ * STORED VALUES:
+ * -->ID
+ * -->FirstName
+ * -->LastName
+ * -->Street
+ * -->House Number
+ * -->Postal-Code
+ * -->City
+ * -->Phone Number
+ */
+@Entity(tableName = "guest_data")
+data class GuestData(
+    @PrimaryKey(autoGenerate = true)
+    var dataId: Long = 0L,
+
+    @ColumnInfo(name = "first_name")
+    var firstName: String = "",
+
+    @ColumnInfo(name = "last_name")
+    var lastName: String = "",
+
+    @ColumnInfo(name = "street")
+    var street: String = "",
+
+    @ColumnInfo(name = "house_number")
+    var houseNumber: String = "",
+
+    @ColumnInfo(name = "postal_code")
+    var postalCode: Int = 0,
+
+    @ColumnInfo(name = "city")
+    var city: String = "",
+
+    @ColumnInfo(name = "phone_number")
+    var phoneNumber: String = ""
+)
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/jarRepositories.xml	(date 1605178255040)
+++ .idea/jarRepositories.xml	(date 1605178255040)
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="BintrayJCenter" />
+      <option name="name" value="BintrayJCenter" />
+      <option name="url" value="https://jcenter.bintray.com/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="Google" />
+      <option name="name" value="Google" />
+      <option name="url" value="https://dl.google.com/dl/android/maven2/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/java/com/hkproductions/listme/host/database/HostDataDao.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/hkproductions/listme/host/database/HostDataDao.kt	(date 1605178973324)
+++ app/src/main/java/com/hkproductions/listme/host/database/HostDataDao.kt	(date 1605178973324)
@@ -0,0 +1,8 @@
+package com.hkproductions.listme.host.database
+
+import androidx.room.Dao
+
+@Dao
+interface HostDataDao {
+
+}
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(date 1605178245185)
+++ .idea/compiler.xml	(date 1605178245185)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="1.8" />
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/java/com/hkproductions/listme/guest/database/GuestDatabase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/hkproductions/listme/guest/database/GuestDatabase.kt	(date 1605178821257)
+++ app/src/main/java/com/hkproductions/listme/guest/database/GuestDatabase.kt	(date 1605178821257)
@@ -0,0 +1,65 @@
+package com.hkproductions.listme.guest.database
+
+import android.content.Context
+import androidx.room.Database
+import androidx.room.Room
+import androidx.room.RoomDatabase
+
+@Database(entities = [GuestData::class], version = 1, exportSchema = false)
+abstract class GuestDatabase : RoomDatabase() {
+
+    abstract val guestDataDao: GuestDataDao
+
+    companion object {
+
+        /**
+         * INSTANCE keep a reference to database returned via getInstance.
+         *
+         * Avoid multiple initialized databases
+         *
+         * Volatile means that the variable never be cached,
+         * all changes will be directly done on the main memory.
+         * This is important for consistent data holding
+         */
+        @Volatile
+        private var INSTANCE: GuestDatabase? = null
+
+        /**
+         * Helper function to get the database
+         *
+         * If a database has already been retrieved, the previous databse will be returned.
+         * Else create a new database.
+         *
+         * This function is threadsafe
+         *
+         * @param context The application context, used to get access to the filesystem
+         */
+        fun getInstance(context: Context): GuestDatabase {
+            /*
+            * If multiple threads ask for a database,
+            * ensure that there is only one database initialize
+            */
+            synchronized(this) {
+                // Copy the current value of INSTANCE to a local variable so Kotlin can smart cast.
+                // Smart cast is only available to local variables.
+                var instance = INSTANCE
+
+                //if instance == null create a new database
+                if (instance == null) {
+                    instance = Room.databaseBuilder(
+                        context.applicationContext,
+                        GuestDatabase::class.java,
+                        "guest_data_database"
+                    ).fallbackToDestructiveMigration()
+                        .build()
+
+                    //Assign INSTANCE to the newly created database
+                    INSTANCE = instance
+                }
+
+                return instance
+            }
+        }
+
+    }
+}
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(date 1605178245192)
+++ .idea/gradle.xml	(date 1605178245192)
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <option name="testRunner" value="PLATFORM" />
+        <option name="distributionType" value="DEFAULT_WRAPPED" />
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="gradleJvm" value="1.8" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+            <option value="$PROJECT_DIR$/app" />
+          </set>
+        </option>
+        <option name="resolveModulePerSourceSet" value="false" />
+        <option name="useQualifiedModuleNames" value="true" />
+      </GradleProjectSettings>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/.gitignore	(date 1605178239086)
+++ .idea/.gitignore	(date 1605178239086)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(date 1605178238486)
+++ .idea/vcs.xml	(date 1605178238486)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(date 1605178245175)
+++ .idea/misc.xml	(date 1605178245175)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/build/classes" />
+  </component>
+  <component name="ProjectType">
+    <option name="id" value="Android" />
+  </component>
+</project>
\ No newline at end of file
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'com.android.application'\r\n    id 'kotlin-android'\r\n}\r\n\r\nandroid {\r\n    compileSdkVersion 30\r\n    buildToolsVersion \"30.0.2\"\r\n\r\n    defaultConfig {\r\n        applicationId \"com.hkproductions.listme\"\r\n        minSdkVersion 21\r\n        targetSdkVersion 30\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = '1.8'\r\n    }\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\r\n    implementation 'androidx.core:core-ktx:1.3.2'\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation 'com.google.android.material:material:1.2.1'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\r\n    testImplementation 'junit:junit:4.+'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision d5fa52100911f50066a483c6bb502f2257a507bc)
+++ app/build.gradle	(date 1605178719563)
@@ -39,7 +39,9 @@
     implementation 'androidx.appcompat:appcompat:1.2.0'
     implementation 'com.google.android.material:material:1.2.1'
     implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
+    implementation 'androidx.room:room-runtime:2.2.5'
     testImplementation 'junit:junit:4.+'
     androidTestImplementation 'androidx.test.ext:junit:1.1.2'
     androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
+    annotationProcessor 'androidx.room:room-compiler:2.2.5'
 }
\ No newline at end of file
Index: app/src/main/java/com/hkproductions/listme/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hkproductions.listme\r\n\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/hkproductions/listme/MainActivity.kt	(revision d5fa52100911f50066a483c6bb502f2257a507bc)
+++ app/src/main/java/com/hkproductions/listme/MainActivity.kt	(date 1605178254635)
@@ -1,7 +1,7 @@
 package com.hkproductions.listme
 
-import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
+import androidx.appcompat.app.AppCompatActivity
 
 class MainActivity : AppCompatActivity() {
     override fun onCreate(savedInstanceState: Bundle?) {
